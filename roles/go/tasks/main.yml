---
# TODO: run default first?
# - name: Ensure git is installed
#   ansible.builtin.package:
#     name: git
#     state: present

- name: Check if Go is already installed
  command: /usr/local/go/bin/go version
  register: current_go_version
  ignore_errors: true

- name: Set default values for Go version check if Go is not installed
  set_fact:
    go_version: "{{ go_version }}"
    go_to_install: "{{ go_version }}"
    installed_go_version: ""
    go_installed: false
  when: current_go_version.failed

- name: Set temporary go version fact if installed
  set_fact:
    go_version_matches: "{{ current_go_version.stdout | regex_search('go(\\d+\\.\\d+\\.\\d+)', '\\1') }}"
  when: not current_go_version.failed

- name: Set facts for existing Go installation
  set_fact:
    installed_go_version: "{{ go_version_matches[0] if go_version_matches else '' }}"
    go_installed: true
    go_to_install: "{{ go_version }}"
  when: not current_go_version.failed

- name: Remove previous Go installation
  become: yes
  file:
    path: /usr/local/go
    state: absent
  when: go_installed and installed_go_version != go_to_install

- name: Download Go archive
  get_url:
    url: "{{ go_url }}"
    dest: /tmp/{{ go_tarball }}
    mode: '0644'
  when: not go_installed or installed_go_version != go_to_install

- name: Extract Go archive
  become: yes
  command: tar -C /usr/local -xzf /tmp/{{ go_tarball }}
  when: not go_installed or installed_go_version != go_to_install

- name: Remove Go tarball
  file:
    path: /tmp/{{ go_tarball }}
    state: absent
  when: not go_installed or installed_go_version != go_to_install

- name: Verify Go installation
  command: /usr/local/go/bin/go version
  register: go_verify
  changed_when: false
  failed_when: go_verify.rc != 0

- name: Print Go version
  debug:
    msg: "Go version installed: {{ go_verify.stdout }}"
